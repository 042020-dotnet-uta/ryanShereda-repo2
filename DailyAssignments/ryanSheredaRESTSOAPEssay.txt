REST, short for Representational State Transfer, is an open standard category of web services written in ASP.NET. Client applications are able to access this API using any HTTP-compatible language or toolset. REST APIs are designed around resources that are accessible by the client, using unique identifiers and specific routing to direct requests to the correct resources. There are six guiding principles that determine if an interface is RESTful: the interface must feature loose coupling, to allow for portability and ease of switching aspects out as technology changes; the requests sent must be stateless and atomic, able to stand on their own; responses are labeled as cacheable or non-cacheable, depending on if the client should be allowed to reuse the data; the interfaces are uniform and generalized; the system has a hierarchical structure, limiting vision of components to the layer they interact with; and the interface must be extendable in functionality through the addition of scripts. Beyond these principles, there are four levels used to determine the extent of how RESTful a site is. The first level involves using a single URI, and using strictly POST requests to interact with it. The second evolves through the use of multiple URIs depending on the resource in question. The third uses HTTP methods such as GET, POST, and DELETE to define the operations used on the resources. The fourth and final level involves using hypermedia to extent the HTTP methods to encompass relevant informational operations for each resource. While only the highest level is truly considered RESTful, most sites fall into the next highest category, and as such has been deemed a reasonable level of RESTfulness.

Web services act as asynchronous online applications, invokable by any suitable client using remote procedure calls. They are written using XML due to the universal nature of the language, meaning any client regardless of platform or system is able to interact with the web service. The standard structure for the interaction between web service and client is the Simple Object Access Protocol, an XML document with standard structure, sent via HTTP. SOAP serves as an intermediate language, providing guidelines on how web services and client applications area ble to interact, through all permutations and combinations. SOAP serves to impose some degree of convention upon the XML documents used to facilitate data exchange. All data exchanges performed through SOAP are, fittingly, called SOAP messages. These messages are comprised of a couple different elements: the envelope, the body/bodies, an optional header, and an optional fault management block. The envelope, a required element, encompasses all other parts of the message, defining the message as a SOAP message through definition about versioning. The body contains the data being sent via the message--as a result, this portion of the message is (understandably) required. The header, while optional, can contain authentication credentials, as well as complex data type definitions that are needed alongside the body of the message. The fault block provides a defined path for any errors that may occur during the process, reporting them back to the user.
